 Учёт клиентов службы такси.

 Функции:
 - зарегистрировать клиента (имя, фамилия, телефон, адрес, сумма, дата последнего заказа)
 - вывести всех клиентов порциями по 10 человек
 - вывести всех клиентов наездивших на сумму больше указанной
 - вывести всех клиентов, делавших заказы за последний месяц

 session14.task1.taxi.domain.Client
 session14.task1.taxi.service.ClientService
    boolean createClient(String name, String surname, String phone, String address) throws ClientException
    List<Client> showClientsByPortion(int portionSize)
    List<Client> showClientsGtSum(int sum)
    List<Client> showClientsLastMonth()
 session14.task1.taxi.service.ClientServiceImpl
 session14.task1.taxi.action.ClientServlet
 session14.task1.taxi.exception.ClientException
 webapp
    index.jsp
    dashboard.jsp - страница со списком функций (доступна после аутентификации)
    registerClient.jsp - форма создания клиента
    clients.jsp - список клиентов

 Задание выполнить в модуле name_surname_web

 Добавить функции работы с заказами такси.
  Функции:
  - оформить заказ (дата, клиент, сумма, адрес подачи, адрес назначения)
  - отредактировать заказ (поменять свойства заказа)
  - вывести список заказов на сумму в указанном диапазоне
  - вывести список всех заказов порциями по 5 штук

  session14.task1.taxi.domain.Order
  session14.task1.taxi.domain.Client
  session14.task1.taxi.service.OrderService
     boolean createOrder(Long id, Client client, String sum, String addressFrom, String addressTo) throws OrderException
     void editOrder(Long id, Client client, String sum, String addressFrom, String addressTo)
     List showOrders(Long from, Long to)
     List showOrdersByPortion()
  session14.task1.taxi.service.OrderServiceImpl
  session14.task1.taxi.action.OrderServlet
  session14.task1.taxi.exception.OrderException
  webapp
     index.jsp
     dashboard.jsp - страница со списком функций
     order.jsp - форма оформления/редактирования заказа
     orders.jsp - список заказов

  Задание выполнить в модуле name_surname_web

   Реализовать авторизацию пользователя системы (оператора).
   Пользователь вводит:
   - логин (должен быть не менее 4 символов, не должен содержать пробелы)
   - идентификационный номер (10 цифр, без букв и других знаков)
   - пароль (должен быть не менее 8 символов,
   включать большие и маленькие буквы, цифры, должен совпадать с подтверждением)
   - подтверждение пароля
   - пользователь с таким логином должен быть уникальным

   session14.task1.taxi.service.AuthorizationService
      boolean register(String login, String id, String pass) throws AuthenticationException // ???
   session14.task1.taxi.service.AuthorizationServiceImpl
   session14.task1.taxi.action.RegisterServlet
   session14.task1.taxi.exception.AuthorizationException
   webapp
      index.jsp
      register.jsp - форма регистрации

   Задание выполнить в модуле name_surname_web

   Оператор вводит логин и пароль.
    Если пароль с логином не совпадает то повторить ввод. Передача осуществляется методом POST.
    Колличество попыток ввода задается в properties файле. После последней неудачной попытки пользователь блокируется.
    Время действия пароля задается в сервисе
    После истечения действия пароля, пользователь должен поменять пароль. Предыдущий вводить нельзя

    session14.task1.taxi.service.AuthenticationService
       boolean authenticate(String login, String pass) throws AuthenticationException
    session14.task1.taxi.service.AuthenticationServiceImpl
    session14.task1.taxi.action.AuthenticationServlet
    session14.task1.taxi.exception.AuthenticationException
    webapp
       index.jsp - страница с формой аутентификации
      dashboard.jsp - поздравления об удачной аутентификации

    Задание выполнить в модуле name_surname_web